# -*- coding: utf-8 -*-
"""Data_Preprocessing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hXq3c-myFYeDHAXwe9P8ao4UpJ09TZAe
"""

import zipfile
import os
import numpy as np
import pandas as pd
import cv2
import matplotlib.pyplot as plt

!wget --no-check-certificate \
    "https://github.com/ChomoJ/MANE-6962-Machine-Learning-Project/archive/refs/heads/main.zip" \
    -O "/content/training_images.zip"
    
zip_ref = zipfile.ZipFile('/content/training_images.zip','r')
zip_ref.extractall('/content')
zip_ref.close()

import skimage.io

image_set = []
mask_set = []

for i in range(0, 400): 
    image_number = str(i)
    image_number = image_number.zfill(3)
    image_location = r"/content/MANE-6962-Machine-Learning-Project-main/original_images/"
    image_ending = r".jpg"

    image_path = image_location + image_number + image_ending

    image = skimage.io.imread(image_path)
    image = cv2.resize(image, (112,112))
    image_set.append(image)
    os.chdir(r"/content/Processed_Images")
    plt.imsave(f"{image_number}.jpg", image)

    label_location = r"/content/MANE-6962-Machine-Learning-Project-main/labeled_images/"
    label_ending = r".png"

    label_path = label_location + image_number + label_ending
    
    label = skimage.io.imread(label_path)

    label = cv2.resize(label, (112,112))
    mask = 3*np.ones([label.shape[0],label.shape[1]])
    
    for j in range(0,label.shape[0]):
      for k in range(0,label.shape[1]):
        target = label[j][k]
        target_sum = np.sum(target)

    
        if target_sum == 0:
            mask[j][k] = 0  #Unlabeled
        elif target_sum == 320 or target_sum == 206 or target_sum == 102 or target_sum == 302 or target_sum == 210:
            mask[j][k] = 1 #Safe to Land: Includes Paved Area, Dirt, Grass, Gravel, and Rooftop
        else:
            mask[j][k] = 2 #Unsafe to Land: Includes Water, Rocks, Pools, Vegetation, Walls, Windows, Doors, Fences, Fence Poles, People, Dogs, Cars, Bicycle, Tree, Bald Tree, 
                       #                AR-Marker, Obstacle, Conflicting
        
    mask_set.append(mask)
    os.chdir(r"/content/Processed_Masks")
    plt.imsave(f"{image_number}.jpg", mask)

os.chdir(r"/content")
np.save('Mask_Set_information', mask_set)

from google.colab import files
files.download('/content/Mask_Set_information.npy')

from google.colab import files

!zip -r /content/Processed_Images.zip /content/Processed_Images

files.download('/content/Processed_Images.zip')

from google.colab import files

!zip -r /content/Procesed_Masks.zip /content/Processed_Masks

files.download('/content/Procesed_Masks.zip')